import os
import uuid
import prefect
from prefect import task, Flow, Client
from prefect.storage import Docker
from prefect.run_configs import KubernetesRun

from job import config, analyze, extract

files = {"/Users/g-clef/IdeaProjects/malwaretl-feature-extractor/job/analyze.py": "/modules/job/analyze.py",
         "/Users/g-clef/IdeaProjects/malwaretl-feature-extractor/job/config.py": "/modules/job/config.py",
         "/Users/g-clef/IdeaProjects/malwaretl-feature-extractor/job/extract.py": "/modules/job/extract.py"
        }


@task(name="make_work_dir")
def make_work_dir(job_id):
    output_dir = os.path.join(config.OUTPUT_DIR, "feature_extraction", job_id, "raw-files")
    if not os.path.exists(output_dir):
        os.makedirs(output_dir, exist_ok=True)
    return output_dir


@task(name="make_output_dir")
def make_output_dir(job_id):
    output_dir = os.path.join(config.OUTPUT_DIR, "feature_extraction", job_id, "results")
    if not os.path.exists(output_dir):
        os.makedirs(output_dir, exist_ok=True)
    return output_dir


def main():
    job_id = str(uuid.uuid4())
    with Flow("malwareETL feature extractor",
              storage=Docker(registry_url="prefect-ui.g-clef.net:5000",
                             base_image="gclef/stoq-transformer:latest-prefect",
                             files=files,
                             env_vars={
                                "PYTHONPATH": "$PYTHONPATH:/modules"
                                },
                             ),
              run_config=KubernetesRun(memory_request="2Gi", memory_limit="2Gi")) as flow:
        logger = prefect.context.get("logger")
        logger.info(f"beginning task with job id {job_id}")
        work_dir = make_work_dir(job_id)
        output_dir = make_output_dir(job_id)
        extract_task = extract.extract(work_dir)
        analyze.analyze(work_dir, output_dir, extract_task)
        logger.info(f"finished task with job id {job_id}")

    client = Client(api_server="http://prefect-ui.g-clef.net:4200/graphql")
    client.register(flow=flow, project_name="malware-feature-extraction")


if __name__ == "__main__":
    if config.DEBUG is False:
        main()
    else:
        analyze.analyze("testing")
